<!-- configure git in local and push to github repository
git init
git branch -M main
git add .
git commit -m "episode1"
git remote add origin https://github.com/gayusuryu/react-learn.git ==> copy from github repository
git push origin main -->

<!-- npm is not node package manager. Its a package manager for js 
do an npm init and give the details and package.json is created . package.json is a configuration for npm-->

<!-- Most important dependency is a bundler(eg:webpack) which bundles all code to PRPD ready .Here we are using parcel as a bundler
Parcel does ==> Dev Build,Create Local server, HMR - Hot Module Replacement ,It has File Watching Algorithm written in C++,
Faster Builds coz of caching,Image Optimization,Minification,Bundling,Compress,Consistent Hashing,Code splitting,
Differential bundling - support older versions,Diagnostics,Error Handling,Tree shaking - remove unused code,
transpiler - converts one code to another ,eg- ts to js,Different dev and prod builds-->

<!-- PROD build - npx parcel build index.html ==>Target "main" declares an output file path of "App.js" 
    which does not match the compiled bundle type "html". This is because of App.js in main in package.json-->

<!-- ~ - update to major version and ^-update to minor version -->

<!-- npx - is used to execute/ignite the app eg- npx parcel index.html-->

<!-- CDN - content delivery network is a network of servers that distribute content from origin server to other
 CORS - Cross Origin Resource Sharing == is a request to resourse from other domain -->

 <!-- Browser scripts cannot have imports or exports. for this error give type="module" in script type ="module" src="./App.js"-->
 
 <!-- Babel - js compiler , (converts ECMAScript2015 to older versions - get browser compatible js out)-->

 <!--https://browserslist.dev/?q=bGFzdCAxMiB2ZXJzaW9u-->
 
<!-- JSX is transpiled before it reaches JS engine and Babel inside Parcel is doing this.
JSX ==>React.createEment ==>React.createElement(JS Object) ==> HTMLElement(render) -->

<!-- React Component ==> 1)Class based component (old), 2==>Functional component-->
<!--React Component is the normal js fn that returns jsx -->

<!-- JSX helps you from cross site scripting malicious attack. Cross site scripting happens if a JS from any api runs in our browser-->

<!--JSX can have only one parent element..So we cant create <div></div><div></div>..So the solution to this is react fragment -->

<!--Instead of React.Fragment react created/gives an empty tag and we can use that <></> -->

<!-- Note: Padding is the space between content and border, which is the next component of the box.
Margin is the outer space around the box. -->

<!--Flex is the value of css display . By using display flex in parent element, child elements automatically align like column or row with auto width and auto height.-->

<!-- System design interview -- config driven UI means the website is driven by data(config)>

<!-- <RestaurantCard key={index} resData={restaurant}/> Dont prefer index as key
Reorders can also cause issues with component state when indexes are used as keys. Component instances are updated and reused based on their key. If the key is an index, moving an item changes it. As a result, component state for things like uncontrolled inputs can get mixed up and updated in unexpected ways. -->

<!-- Two types of export ==> Default and Named export ==> Named export is add export in front of CDN_URL here for example-->
<!--For named export and to import that use {} in import. eg - import { CDN_URL } from "../utils/constants"; -->

<!--We can have named and default export in a single file together. but no two default export -->

<!--React Hooks - normal js fn ==>useState(),useEffect() .And import these as named import-->

<!--Whenever a state variable changes react rerenderes the component-->

<!--Reconciliation(React Fiber) ==> Virtual DOM is a representation of actual DOM 
React Fiber is the new way of finding the div and updating the DOM
Diff Algorithm - diff btw old virtual DOM and new virtual DOM
Vitual DOM actually is a object representation of actual DOM and react compares this obj when change happens and update the 
actual DOM -->

<!--React is fast because react is doing efficient DOM manipulation-->

<!-- Monolith means putting everthing in single project eg-java,jsp,db all in one project like done in BOL AMEX-->

<!-- Microservices used for separation of concern- Single responsibility principle-->

<!-- How const var is changed here -  const [btnName,setBtnName] = useState("Login"); ==> Its because the second time its called a 
new btnName is created. And header will be rendered again but only the button is changed -->

<!-- Whenever a state varibale update react triggers a reconciliation cycle -->

<!--if there is no dependency array that is no [] given as sec parameter to useffect ==> useEffect called on every render
    if there is empy dependency array = [] ==> useeffect is called on initial render (just once)
    if dependency array is [btnName] ==> called everytime btnName is updated
    useEffect(()=>{

    },[]) -->

<!-- Link to navigate to pages for router -->
<!-- createBrowserRouter to create the routes -->
<!-- useRouteError to get the error -->

<!-- Two types of routing in web app 
Client side routing
Server side routing
-->

<!-- In class based components the life cycle is like - first constructor is called , then render is called,
then the componentDidMount is called -->

<!--Timing and Avoiding Race Conditions:componentDidMount is called after the component has been mounted to the DOM. A
t this point, the component is ready to interact with the browser's Document Object Model (DOM).
Placing API calls in componentDidMount ensures that you're fetching data after the component has been initialized and rendered. 
This timing helps prevent race conditions, where data arrives before the component is ready to handle it. -->

//https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/

<!-- For optimizing the app we need to reduce the size of the bundled js file.. This process is called
chunking or code splitting or lazy loading or dynamic bundling or on demand loading or dynamic import-->